plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    // id 'com.google.gms.google-services' // Optional
}

// --- Logika untuk membuat debug.keystore jika tidak ada ---
def debugKeystoreFile = file("${project.buildDir}/debug.keystore")
if (!debugKeystoreFile.exists()) {
    println("Creating debug keystore at: ${debugKeystoreFile.path}")
    debugKeystoreFile.parentFile.mkdirs()
    exec {
        commandLine 'keytool', '-genkey', '-v',
            '-keystore', debugKeystoreFile.absolutePath,
            '-storepass', 'android', '-alias', 'androiddebugkey',
            '-keypass', 'android',
            '-keyalg', 'RSA', '-keysize', '2048',
            '-validity', '10000',
            '-dname', 'CN=Android Debug, O=Android, C=US'
    }
}
// --------------------------------------------------------

android {
    namespace 'com.victory.poolassistant'
    compileSdk 34

    defaultConfig {
        applicationId "com.victory.poolassistant"
        minSdk 24
        targetSdk 34
        versionCode 20000
        versionName "2.0.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // Native library support
        ndk {
            abiFilters 'arm64-v8a', 'armeabi-v7a', 'x86', 'x86_64'
        }

        // Build config fields
        buildConfigField "boolean", "DEBUG_MODE", "false"
        buildConfigField "String", "BUILD_TIME", "\"${getBuildTime()}\""
        buildConfigField "String", "GIT_COMMIT", "\"${getGitCommit()}\""
    }

    signingConfigs {
        debug {
            storeFile debugKeystoreFile
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }

        release {
            storeFile file(findProperty('RELEASE_STORE_FILE') ?: 'release.keystore')
            storePassword findProperty('RELEASE_STORE_PASSWORD') ?: System.getenv('KEYSTORE_PASSWORD')
            keyAlias findProperty('RELEASE_KEY_ALIAS') ?: System.getenv('KEY_ALIAS')
            keyPassword findProperty('RELEASE_KEY_PASSWORD') ?: System.getenv('KEY_PASSWORD')
        }
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            shrinkResources = minifyEnabled // Perbaikan di sini
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"

            buildConfigField "boolean", "DEBUG_MODE", "true"
            buildConfigField "boolean", "OBFUSCATED", "false"
            buildConfigField "String", "BUILD_TYPE_NAME", "\"Debug\""
        }

        release {
            debuggable false
            minifyEnabled true
            shrinkResources = minifyEnabled // Perbaikan di sini

            if (project.hasProperty('RELEASE_STORE_FILE')) {
                signingConfig signingConfigs.release
                System.out.println("Building signed release APK.")
            } else {
                signingConfig null
                System.out.println("WARNING: Building unsigned release APK. Keystore properties not found.")
            }

            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'),
                         'proguard-rules.pro',
                         'r8-stealth.pro'

            buildConfigField "boolean", "DEBUG_MODE", "false"
            buildConfigField "boolean", "OBFUSCATED", "true"
            buildConfigField "String", "BUILD_TYPE_NAME", "\"Release-Protected\""
        }

        releaseOpen {
            debuggable false
            minifyEnabled false
            shrinkResources = minifyEnabled // Perbaikan di sini

            proguardFiles 'proguard-clean-only.pro'

            buildConfigField "boolean", "DEBUG_MODE", "false"
            buildConfigField "boolean", "OBFUSCATED", "false"
            buildConfigField "String", "BUILD_TYPE_NAME", "\"Release-Open\""
        }

        beta {
            debuggable true
            minifyEnabled true
            shrinkResources = minifyEnabled // Perbaikan di sini

            if (project.hasProperty('RELEASE_STORE_FILE')) {
                signingConfig signingConfigs.release
            } else {
                signingConfig null
                System.out.println("WARNING: Building unsigned beta APK. Keystore properties not found.")
            }

            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                         'proguard-rules.pro'

            buildConfigField "boolean", "DEBUG_MODE", "true"
            buildConfigField "boolean", "OBFUSCATED", "true"
            buildConfigField "String", "BUILD_TYPE_NAME", "\"Beta\""
        }
    }

    flavorDimensions "version"
    productFlavors {
        standard {
            dimension "version"
            applicationIdSuffix ".standard"
            versionNameSuffix "-standard"

            buildConfigField "boolean", "ROOT_FEATURES", "false"
            buildConfigField "boolean", "LSPOSED_SUPPORT", "false"
        }

        pro {
            dimension "version"
            applicationIdSuffix ".pro"
            versionNameSuffix "-pro"

            buildConfigField "boolean", "ROOT_FEATURES", "true"
            buildConfigField "boolean", "LSPOSED_SUPPORT", "true"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        viewBinding true
        buildConfig true
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion compose_version
    }

    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
            excludes += '/META-INF/DEPENDENCIES'
            excludes += '/META-INF/LICENSE*'
            excludes += '/META-INF/NOTICE*'
        }
    }

    // Lint options
    lint {
        abortOnError false
        checkReleaseBuilds false
        disable 'MissingTranslation', 'ExtraTranslation'
    }
    
    androidComponents {
        onVariants(selector().all(), { variant ->
            variant.outputs.forEach { output ->
                def appName = "PoolAssistant"
                def flavor = variant.flavorName.capitalize()
                def buildType = variant.buildType
                def version = output.versionName.get()
                def buildNumber = System.getenv("BUILD_NUMBER") ?: "local"

                def buildTypeName = buildType
                switch(buildType) {
                    case 'release':
                        buildTypeName = 'Protected'
                        break
                    case 'releaseOpen':
                        buildTypeName = 'Open'
                        break
                    case 'beta':
                        buildTypeName = 'Beta'
                        break
                    case 'debug':
                        buildTypeName = 'Debug'
                        break
                }
                
                def newFileName = "${appName}-${flavor}-${buildTypeName}-v${version}-build${buildNumber}.apk"
                output.outputFileName.set(newFileName)
            }
        })
    }
}

dependencies {
    // Core Android
    implementation 'androidx.core:core-ktx:1.12.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.activity:activity-ktx:1.8.2'
    implementation 'androidx.fragment:fragment-ktx:1.6.2'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.7.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.7.0'
    implementation 'androidx.lifecycle:lifecycle-service:2.7.0'

    // UI & Material Design
    implementation 'com.google.android.material:material:1.11.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.3.2'

    // Jetpack Compose (modern UI)
    implementation "androidx.compose.ui:ui:$compose_version"
    implementation "androidx.compose.ui:ui-tooling-preview:$compose_version"
    implementation "androidx.compose.material3:material3:1.1.2"
    implementation "androidx.activity:activity-compose:1.8.2"

    // Navigation
    implementation 'androidx.navigation:navigation-fragment-ktx:2.7.6'
    implementation 'androidx.navigation:navigation-ui-ktx:2.7.6'

    // Background work
    implementation 'androidx.work:work-runtime-ktx:2.9.0'

    // Permissions
    implementation 'com.karumi:dexter:6.2.3'
    implementation 'pub.devrel:easypermissions:3.0.0'

    // Settings & Preferences
    implementation 'androidx.preference:preference-ktx:1.2.1'

    // JSON & Data
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'org.jetbrains.kotlinx:kotlinx-serialization-json:1.6.2'

    // Root utilities with libsu (pro flavor only)
    def libsuVersion = '6.0.0'
    proImplementation "com.github.topjohnwu.libsu:core:${libsuVersion}"
    proImplementation "com.github.topjohnwu.libsu:service:${libsuVersion}"
    proImplementation "com.github.topjohnwu.libsu:nio:${libsuVersion}"

    // Image processing (optional)
    implementation 'com.github.bumptech.glide:glide:4.16.0'

    // Animations
    implementation 'com.airbnb.android:lottie:6.3.0'

    // Debugging
    debugImplementation "androidx.compose.ui:ui-tooling:$compose_version"
    debugImplementation "androidx.compose.ui:ui-test-manifest:$compose_version"
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.12'

    // Testing
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:5.8.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$compose_version"
}

// Helper functions
def getBuildTime() {
    return new Date().format("yyyy-MM-dd HH:mm:ss")
}

def getGitCommit() {
    try {
        return 'git rev-parse --short HEAD'.execute().text.trim()
    } catch (Exception e) {
        return "unknown"
    }
}

// Custom tasks
task generateVersionInfo {
    doLast {
        def versionFile = file("src/main/assets/version.json")
        versionFile.parentFile.mkdirs()
        versionFile.text = """
{
  "versionName": "${android.defaultConfig.versionName}",
  "versionCode": ${android.defaultConfig.versionCode},
  "buildTime": "${getBuildTime()}",
  "gitCommit": "${getGitCommit()}"
}
"""
    }
}

preBuild.dependsOn generateVersionInfo
