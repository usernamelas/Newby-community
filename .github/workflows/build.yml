name: üé± Pool Assistant Build

on:
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: true
        default: 'debug'
        type: choice
        options:
        - debug
        - beta
        - release
      
      flavor:
        description: 'App flavor'
        required: true
        default: 'standard'
        type: choice
        options:
        - standard
        - pro

  push:
    branches: 
      - 'termux-builds'
      - 'release/*'
    tags:
      - 'v*'

  pull_request:
    branches: [ main, develop ]

env:
  JAVA_VERSION: '17'
  ANDROID_API_LEVEL: '34'
  ANDROID_BUILD_TOOLS: '34.0.0'

jobs:
  build:
    name: üèóÔ∏è Build APK
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
    
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        api-level: ${{ env.ANDROID_API_LEVEL }}
        build-tools: ${{ env.ANDROID_BUILD_TOOLS }}
    
    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
    
    - name: Make gradlew executable
      run: chmod +x gradlew
    
    - name: Determine build configuration
      id: config
      run: |
        BUILD_TYPE="debug"
        FLAVOR="standard"
        
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          BUILD_TYPE="${{ github.event.inputs.build_type }}"
          FLAVOR="${{ github.event.inputs.flavor }}"
        elif [[ "${{ github.ref }}" == refs/tags/v* ]]; then
          BUILD_TYPE="release"
          FLAVOR="pro"
        elif [[ "${{ github.ref }}" == refs/heads/release/* ]]; then
          BUILD_TYPE="beta"
          FLAVOR="pro"
        fi
        
        echo "build_type=$BUILD_TYPE" >> $GITHUB_OUTPUT
        echo "flavor=$FLAVOR" >> $GITHUB_OUTPUT
        
        echo "üèóÔ∏è  Build Configuration:"
        echo "   Flavor: $FLAVOR"
        echo "   Build Type: $BUILD_TYPE"
    
    # REMOVED: Setup keystore step - building unsigned
    # - name: Setup keystore
    #   if: steps.config.outputs.build_type == 'release'
    #   ...

    - name: Build unsigned APK
      run: |
        BUILD_TYPE="${{ steps.config.outputs.build_type }}"
        FLAVOR="${{ steps.config.outputs.flavor }}"
        
        # Capitalize for Gradle task
        FLAVOR_CAP="$(tr '[:lower:]' '[:upper:]' <<< ${FLAVOR:0:1})${FLAVOR:1}"
        BUILD_TYPE_CAP="$(tr '[:lower:]' '[:upper:]' <<< ${BUILD_TYPE:0:1})${BUILD_TYPE:1}"
        
        echo "üîß Building unsigned $FLAVOR_CAP $BUILD_TYPE_CAP APK..."
        echo "   Command: ./gradlew assemble${FLAVOR_CAP}${BUILD_TYPE_CAP}"
        
        # Show build info before building
        if [ "$FLAVOR" = "pro" ]; then
          echo "üîê PRO BUILD: R8 + ProGuard protection will be applied"
        else
          echo "üìñ STANDARD BUILD: Clean build, no protection"
        fi
        
        # Build APK (unsigned)
        ./gradlew assemble${FLAVOR_CAP}${BUILD_TYPE_CAP} --stacktrace
        
        # Show build result
        if [ $? -eq 0 ]; then
          echo "‚úÖ Build successful!"
          echo "üì¶ APK files generated:"
          find app/build/outputs/apk -name "*.apk" -type f | while read apk; do
            echo "   üì± $apk"
            ls -la "$apk"
          done
        else
          echo "‚ùå Build failed!"
          exit 1
        fi
    
    - name: Run tests
      if: steps.config.outputs.build_type != 'release'
      run: |
        FLAVOR="${{ steps.config.outputs.flavor }}"
        BUILD_TYPE="${{ steps.config.outputs.build_type }}"
    
    # Capitalize first letter correctly
        FLAVOR_CAP="$(echo ${FLAVOR^})"
        BUILD_TYPE_CAP="$(echo ${BUILD_TYPE^})"
    
        echo "üß™ Running tests for $FLAVOR_CAP $BUILD_TYPE_CAP..."
        ./gradlew test
    
    - name: Find and rename APK
      id: apk
      run: |
        BUILD_TYPE="${{ steps.config.outputs.build_type }}"
        FLAVOR="${{ steps.config.outputs.flavor }}"
        
        # Find APK file
        APK_PATH="app/build/outputs/apk/$FLAVOR/$BUILD_TYPE"
        APK_FILE=$(find $APK_PATH -name "*.apk" | head -1)
        
        if [ -f "$APK_FILE" ]; then
          # Create new name with unsigned suffix
          VERSION_NAME=$(grep "versionName" app/build.gradle | sed 's/.*"\(.*\)".*/\1/')
          BUILD_NUMBER=${{ github.run_number }}
          
          # Add protection info to filename
          if [ "$FLAVOR" = "pro" ]; then
            PROTECTION_SUFFIX="-Protected"
          else
            PROTECTION_SUFFIX="-Clean"
          fi
          
          NEW_NAME="PoolAssistant-$FLAVOR-$BUILD_TYPE$PROTECTION_SUFFIX-v$VERSION_NAME-build$BUILD_NUMBER-unsigned.apk"
          
          # Rename file
          NEW_PATH="$APK_PATH/$NEW_NAME"
          mv "$APK_FILE" "$NEW_PATH"
          
          echo "apk_path=$NEW_PATH" >> $GITHUB_OUTPUT
          echo "apk_name=$NEW_NAME" >> $GITHUB_OUTPUT
          
          # Get file size
          APK_SIZE=$(du -h "$NEW_PATH" | cut -f1)
          echo "apk_size=$APK_SIZE" >> $GITHUB_OUTPUT
          
          echo "‚úÖ APK renamed: $NEW_NAME"
        else
          echo "‚ùå APK file not found in $APK_PATH"
        fi
    
    - name: Generate build info
      run: |
        FLAVOR="${{ steps.config.outputs.flavor }}"
        BUILD_TYPE="${{ steps.config.outputs.build_type }}"
        if [ "$FLAVOR" = "pro" ]; then
          ROOT_SUPPORT="Yes"
          LIBSU_INTEGRATION="Yes"
        else
          ROOT_SUPPORT="No"
          LIBSU_INTEGRATION="No"
        fi
        if [ "$BUILD_TYPE" = "release" ]; then
          R8_OBFUSCATION="Yes"
        else
          R8_OBFUSCATION="No"
        fi
        VERSION_NAME=$(grep "versionName" app/build.gradle | sed 's/.*"\(.*\)".*/\1/')
        
        echo "Pool Assistant Build Info" > build_info.txt
        echo "" >> build_info.txt
        echo "Build Details:" >> build_info.txt
        echo "‚Ä¢ Flavor: $FLAVOR" >> build_info.txt
        echo "‚Ä¢ Build Type: $BUILD_TYPE" >> build_info.txt
        echo "‚Ä¢ Version: $VERSION_NAME" >> build_info.txt
        echo "‚Ä¢ Build Number: ${{ github.run_number }}" >> build_info.txt
        echo "‚Ä¢ Commit: $(git rev-parse --short HEAD)" >> build_info.txt
        echo "‚Ä¢ Build Time: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> build_info.txt
        echo "" >> build_info.txt
        echo "APK Details:" >> build_info.txt
        echo "‚Ä¢ File: ${{ steps.apk.outputs.apk_name }}" >> build_info.txt
        echo "‚Ä¢ Size: ${{ steps.apk.outputs.apk_size }}" >> build_info.txt
        echo "‚Ä¢ Min SDK: 24 (Android 7.0)" >> build_info.txt
        echo "‚Ä¢ Target SDK: 34 (Android 14)" >> build_info.txt
        echo "" >> build_info.txt
        echo "Features:" >> build_info.txt
        echo "‚Ä¢ Root Support: $ROOT_SUPPORT" >> build_info.txt
        echo "‚Ä¢ libsu Integration: $LIBSU_INTEGRATION" >> build_info.txt
        echo "‚Ä¢ R8 Obfuscation: $R8_OBFUSCATION" >> build_info.txt
    
    - name: Upload APK
      if: steps.apk.outputs.apk_path != ''
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.apk.outputs.apk_name }}
        path: ${{ steps.apk.outputs.apk_path }}
        retention-days: 30
    
    - name: Upload build info
      uses: actions/upload-artifact@v4
      with:
        name: build-info-${{ steps.config.outputs.flavor }}-${{ steps.config.outputs.build_type }}
        path: build_info.txt
        retention-days: 7
    
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/v') && steps.config.outputs.build_type == 'release'
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ steps.apk.outputs.apk_path }}
        body_path: build_info.txt
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # REMOVED: Cleanup keystore step - not needed for unsigned builds
    # - name: Cleanup keystore
    #   if: always()
    #   ...