name: Pool Assistant Build

on:
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: true
        default: 'debug'
        type: choice
        options:
          - debug
          - beta
          - release
      
      flavor:
        description: 'App flavor'
        required: true
        default: 'standard'
        type: choice
        options:
          - standard
          - pro

  push:
    branches: 
      - 'main'
      - 'termux-builds'
      - 'release/*'
    tags:
      - 'v*'

  pull_request:
    branches: [ main, develop ]

env:
  JAVA_VERSION: '17'
  ANDROID_API_LEVEL: '34'
  ANDROID_BUILD_TOOLS: '34.0.0'

jobs:
  build:
    name: Build APK
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: .
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
    
    - name: Setup Android SDK
      run: |
        echo "ANDROID_HOME: $ANDROID_HOME"
        echo "Available SDK components:"
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --list_installed
        
        if ! $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --list_installed | grep -q "platforms;android-${{ env.ANDROID_API_LEVEL }}"; then
          echo "Installing Android API ${{ env.ANDROID_API_LEVEL }}"
          yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "platforms;android-${{ env.ANDROID_API_LEVEL }}"
        fi
        
        if ! $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --list_installed | grep -q "build-tools;${{ env.ANDROID_BUILD_TOOLS }}"; then
          echo "Installing Build Tools ${{ env.ANDROID_BUILD_TOOLS }}"
          yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "build-tools;${{ env.ANDROID_BUILD_TOOLS }}"
        fi

    - name: Generate debug keystore
      run: |
        mkdir -p ~/.android
        keytool -genkey -v -keystore ~/.android/debug.keystore \
        -storepass android -alias androiddebugkey -keypass android \
        -keyalg RSA -keysize 2048 -validity 10000 \
        -dname "CN=Android Debug,O=Android,C=US"    



    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}

    - name: Setup Gradle Wrapper
      run: |
        echo "Current directory: $(pwd)"
        ls -la
        if [ -f gradlew ]; then
          echo "gradlew found, making executable..."
          chmod +x gradlew
          ./gradlew --version
        else
          echo "gradlew not found!"
          exit 1
        fi
    
    - name: Fix Compose Version
      run: |
        echo "=== Fixing Compose Version ==="
        
        # Update compose version in gradle.properties (now in root)
        if [ -f gradle.properties ]; then
          echo "Current compose version:"
          grep compose_version gradle.properties || echo "No compose_version found"
          
          # Update to compatible version
          sed -i 's/compose_version=.*/compose_version=1.6.8/' gradle.properties
          
          echo "✅ Updated compose_version to 1.6.8"
          grep compose_version gradle.properties
        else
          echo "❌ gradle.properties not found!"
          exit 1
        fi
    
    - name: Determine build configuration
      id: config
      run: |
        BUILD_TYPE="debug"
        FLAVOR="standard"

        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          BUILD_TYPE="${{ github.event.inputs.build_type }}"
          FLAVOR="${{ github.event.inputs.flavor }}"
        elif [[ "${{ github.ref }}" == refs/tags/v* ]]; then
          BUILD_TYPE="release"
          FLAVOR="pro"
        elif [[ "${{ github.ref }}" == refs/heads/release/* ]]; then
          BUILD_TYPE="beta"
          FLAVOR="pro"
        fi
        
        echo "build_type=$BUILD_TYPE" >> $GITHUB_OUTPUT
        echo "flavor=$FLAVOR" >> $GITHUB_OUTPUT

    - name: Setup keystore
      if: steps.config.outputs.build_type == 'release'
      env:
        KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
      run: |
        if [ -n "$KEYSTORE_BASE64" ]; then
          echo "$KEYSTORE_BASE64" | base64 -d > app/release.keystore
          # Gunakan path absolut atau relatif yang benar
          echo "RELEASE_STORE_FILE=release.keystore" >> gradle.properties
          echo "RELEASE_STORE_PASSWORD=$KEYSTORE_PASSWORD" >> gradle.properties
          echo "RELEASE_KEY_ALIAS=$KEY_ALIAS" >> gradle.properties
          echo "RELEASE_KEY_PASSWORD=$KEY_PASSWORD" >> gradle.properties
          
          # Verify keystore berhasil dibuat
          ls -la app/release.keystore
          echo "Keystore setup completed"
        else
          echo "No keystore found, building unsigned APK"
        fi

    - name: Verify Build Configuration
      run: |
        echo "=== Environment Check ==="
        java -version
        ./gradlew --version
        
        echo "=== Gradle Properties Check ==="
        if [ -f gradle.properties ]; then
          echo "gradle.properties exists"
          # Jangan tampilkan password, hanya cek keberadaan
          grep -E "RELEASE_STORE_FILE|RELEASE_KEY_ALIAS" gradle.properties || echo "Keystore properties not found"
        fi
        
        echo "=== Keystore File Check ==="
        if [ -f app/release.keystore ]; then
          echo "✅ Keystore file exists"
          ls -la app/release.keystore
        else
          echo "❌ Keystore file not found"
        fi

        echo "=== Available Build Variants ==="
        ./gradlew :app:tasks --all | grep -E "(assemble|build)" | head -20

    - name: Build APK
      run: |
        BUILD_TYPE="${{ steps.config.outputs.build_type }}"
        FLAVOR="${{ steps.config.outputs.flavor }}"

        FLAVOR_CAP="$(tr '[:lower:]' '[:upper:]' <<< ${FLAVOR:0:1})${FLAVOR:1}"
        BUILD_TYPE_CAP="$(tr '[:lower:]' '[:upper:]' <<< ${BUILD_TYPE:0:1})${BUILD_TYPE:1}"

        TASK=":app:assemble${FLAVOR_CAP}${BUILD_TYPE_CAP}"

        echo "=== Building APK with task: $TASK ==="
        ./gradlew $TASK --stacktrace

    - name: Find and rename APK (Dynamic)
      id: apk
      run: |
        echo "=== Looking for APK files ==="
        find . -name "*.apk" -type f | head -10
        
        APK_FILE=$(find . -name "*.apk" -type f | head -1)
        
        if [ -f "$APK_FILE" ]; then
          echo "Found APK: $APK_FILE"
          
          APK_SIZE=$(du -h "$APK_FILE" | cut -f1)
          BUILD_NUMBER=${{ github.run_number }}

          ORIGINAL_NAME=$(basename "$APK_FILE")
          NEW_NAME="PoolAssistant-build$BUILD_NUMBER-$ORIGINAL_NAME"
          
          APK_DIR=$(dirname "$APK_FILE")
          NEW_PATH="$APK_DIR/$NEW_NAME"
          
          mv "$APK_FILE" "$NEW_PATH"
          
          echo "apk_path=$NEW_PATH" >> $GITHUB_OUTPUT
          echo "apk_name=$NEW_NAME" >> $GITHUB_OUTPUT
          echo "apk_size=$APK_SIZE" >> $GITHUB_OUTPUT
          
          echo "APK renamed to: $NEW_PATH"
        else
          echo "No APK file found!"
          find . -path "*/build/outputs/*" -name "*.apk" || echo "No APK in build outputs"
          exit 1
        fi
        
    - name: Cleanup keystore
      if: always()
      run: |
        if [ -f app/release.keystore ]; then
          rm -f app/release.keystore
          echo "Keystore cleaned up"
        fi

    - name: Generate build info
      run: |
        FLAVOR="${{ steps.config.outputs.flavor }}"
        BUILD_TYPE="${{ steps.config.outputs.build_type }}"
        if [ "$FLAVOR" = "pro" ]; then
          ROOT_SUPPORT="Yes"
          LIBSU_INTEGRATION="Yes"
        else
          ROOT_SUPPORT="No"
          LIBSU_INTEGRATION="No"
        fi
        if [ "$BUILD_TYPE" = "release" ]; then
          R8_OBFUSCATION="Yes"
        else
          R8_OBFUSCATION="No"
        fi
        VERSION_NAME=$(grep "versionName" app/build.gradle | sed 's/.*"\(.*\)".*/\1/')

        echo "Pool Assistant Build Info" > build_info.txt
        echo "" >> build_info.txt
        echo "Build Details:" >> build_info.txt
        echo "• Flavor: $FLAVOR" >> build_info.txt
        echo "• Build Type: $BUILD_TYPE" >> build_info.txt
        echo "• Version: $VERSION_NAME" >> build_info.txt
        echo "• Build Number: ${{ github.run_number }}" >> build_info.txt
        echo "• Commit: $(git rev-parse --short HEAD)" >> build_info.txt
        echo "• Build Time: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> build_info.txt
        echo "" >> build_info.txt
        echo "APK Details:" >> build_info.txt
        echo "• File: ${{ steps.apk.outputs.apk_name }}" >> build_info.txt
        echo "• Size: ${{ steps.apk.outputs.apk_size }}" >> build_info.txt
        echo "• Min SDK: 24 (Android 7.0)" >> build_info.txt
        echo "• Target SDK: 34 (Android 14)" >> build_info.txt
        echo "" >> build_info.txt
        echo "Features:" >> build_info.txt
        echo "• Root Support: $ROOT_SUPPORT" >> build_info.txt
        echo "• libsu Integration: $LIBSU_INTEGRATION" >> build_info.txt
        echo "• R8 Obfuscation: $R8_OBFUSCATION" >> build_info.txt

    - name: Upload APK
      if: steps.apk.outputs.apk_path != ''
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.apk.outputs.apk_name }}
        path: ${{ steps.apk.outputs.apk_path }}
        retention-days: 30

    - name: Upload build info
      uses: actions/upload-artifact@v4
      with:
        name: build-info-${{ steps.config.outputs.flavor }}-${{ steps.config.outputs.build_type }}
        path: build_info.txt
        retention-days: 7

    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/v') && steps.config.outputs.build_type == 'release'
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ steps.apk.outputs.apk_path }}
        body_path: build_info.txt
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}