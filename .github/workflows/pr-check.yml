
name: üîç Pull Request Checks

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]

jobs:
  # ================================
  # CODE QUALITY CHECKS
  # ================================
  code_quality:
    name: üìã Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
    
    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
    
    - name: Make gradlew executable
      run: chmod +x gradlew
    
    - name: Run lint checks
      run: ./gradlew lintStandardDebug --continue
    
    - name: Upload lint results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: lint-results
        path: app/build/reports/lint-results-*.html
        retention-days: 7
    
    - name: Run unit tests
      run: ./gradlew testStandardDebugUnitTest --continue
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: app/build/reports/tests/
        retention-days: 7
    
    - name: Check code formatting
      run: |
        echo "Checking code formatting..."
        # Add your formatting checks here
        # For example, using ktlint for Kotlin files
        # ./gradlew ktlintCheck
    
    - name: Security scan
      run: |
        echo "Running security checks..."
        # Check for hardcoded secrets, passwords, etc.
        if grep -r "password\|secret\|key" app/src/ --include="*.java" --include="*.kt" | grep -v "//"; then
          echo "‚ö†Ô∏è Warning: Potential hardcoded secrets found"
          grep -r "password\|secret\|key" app/src/ --include="*.java" --include="*.kt" | grep -v "//"
        else
          echo "‚úÖ No hardcoded secrets found"
        fi

  # ================================
  # BUILD TEST
  # ================================
  build_test:
    name: üèóÔ∏è Build Test
    runs-on: ubuntu-latest
    needs: code_quality
    
    strategy:
      matrix:
        build_type: [debug, beta]
        flavor: [standard, pro]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
    
    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
    
    - name: Make gradlew executable
      run: chmod +x gradlew
    
    - name: Build APK - ${{ matrix.flavor }} ${{ matrix.build_type }}
      run: ./gradlew assemble${{ matrix.flavor }}${{ matrix.build_type }} --stacktrace
    
    - name: Check APK size
      run: |
        APK_PATH="app/build/outputs/apk/${{ matrix.flavor }}/${{ matrix.build_type }}"
        APK_FILE=$(find $APK_PATH -name "*.apk" | head -1)
        
        if [ -f "$APK_FILE" ]; then
          APK_SIZE=$(du -h "$APK_FILE" | cut -f1)
          APK_SIZE_BYTES=$(du -b "$APK_FILE" | cut -f1)
          
          echo "üì¶ APK Size: $APK_SIZE ($APK_SIZE_BYTES bytes)"
          
          # Check if APK size is reasonable (less than 50MB)
          if [ $APK_SIZE_BYTES -gt 52428800 ]; then
            echo "‚ö†Ô∏è Warning: APK size is larger than 50MB"
            exit 1
          else
            echo "‚úÖ APK size is within acceptable limits"
          fi
        fi

  # ================================
  # PR SUMMARY
  # ================================
  pr_summary:
    name: üìä PR Summary
    runs-on: ubuntu-latest
    needs: [code_quality, build_test]
    if: always()
    
    steps:
    - name: Generate PR summary
      uses: actions/github-script@v7
      with:
        script: |
          const { data: pr } = await github.rest.pulls.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number
          });
          
          const codeQualityStatus = '${{ needs.code_quality.result }}';
          const buildTestStatus = '${{ needs.build_test.result }}';
          
          const summary = `## üîç PR Check Summary
          
          **Code Quality**: ${codeQualityStatus === 'success' ? '‚úÖ Passed' : '‚ùå Failed'}
          **Build Test**: ${buildTestStatus === 'success' ? '‚úÖ Passed' : '‚ùå Failed'}
          
          ### üìã Details
          - **Author**: @${pr.user.login}
          - **Changes**: ${pr.changed_files} files changed
          - **Additions**: +${pr.additions} lines
          - **Deletions**: -${pr.deletions} lines
          
          ### üéØ Next Steps
          ${codeQualityStatus === 'success' && buildTestStatus === 'success' 
            ? '‚úÖ All checks passed! Ready for review.' 
            : '‚ùå Some checks failed. Please review and fix the issues.'}
          `;
          
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: summary
          });